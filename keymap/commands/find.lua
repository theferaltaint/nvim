local Builder = require("keymap.builder")

---@class Find : Builder
local Find = Builder:extend()
Find.__index = Find

-- Native keybindings
Find.StartForward = Builder:New()
    :NormalMode()
    :VisualMode()
    :OperatorMode()
    :Key("/")
    :Action("/")
    :Desc("Enter forward search mode")

Find.StartBackward = Builder:New()
    :NormalMode()
    :VisualMode()
    :OperatorMode()
    :Key("?")
    :Action("?")
    :Desc("Enter backward search mode")

Find.NextMatch = Builder:New()
    :NormalMode()
    :VisualMode()
    :OperatorMode()
    :Key("n")
    :Action("n")
    :Desc("Jump to next match")

Find.PrevMatch = Builder:New()
    :NormalMode()
    :VisualMode()
    :OperatorMode()
    :Key("N")
    :Action("N")
    :Desc("Jump to previous match")

Find.FindCurrentWord = Builder:New()
    :NormalMode()
    :VisualMode()
    :OperatorMode()
    :Key("*")
    :Action("*")
    :Desc("Find current word forward")

Find.FindCurrentWordBackward = Builder:New()
    :NormalMode()
    :VisualMode()
    :OperatorMode()
    :Key("#")
    :Action("#")
    :Desc("Find current word backward")

-- Commands (no default keys)
Find.ClearHighlight = Builder:New()
    :NormalMode()
    :VisualMode()
    :OperatorMode()
    :Action(":nohlsearch<CR>")
    :Desc("Clear all search highlights")

Find.SubstitutePrompt = Builder:New()
    :NormalMode()
    :VisualMode()
    :OperatorMode()
    :Action(":%s//g<Left><Left>")
    :Desc("Start substitute prompt")

Find.SubstituteGlobal = Builder:New()
    :NormalMode()
    :VisualMode()
    :OperatorMode()
    :Action(":%s/old/new/g<CR>")
    :Desc("Replace all")

Find.SubstituteLine = Builder:New()
    :NormalMode()
    :VisualMode()
    :OperatorMode()
    :Action(":s/old/new/g<CR>")
    :Desc("Replace in current line")

Find.RepeatLastFind = Builder:New()
    :NormalMode()
    :VisualMode()
    :OperatorMode()
    :Action(":&&<CR>")
    :Desc("Repeat last substitute")

-- Quickfix
Find.QuickFix = Builder:New()
    :NormalMode()
    :VisualMode()
    :OperatorMode()
    :Action(":copen<CR>")
    :Desc("Open quickfix list")

Find.QuickFixClose = Builder:New()
    :NormalMode()
    :VisualMode()
    :OperatorMode()
    :Action(":cclose<CR>")
    :Desc("Close quickfix list")

Find.QuickFixNext = Builder:New()
    :NormalMode()
    :VisualMode()
    :OperatorMode()
    :Action(":cnext<CR>")
    :Desc("Next quickfix item")

Find.QuickFixPrev = Builder:New()
    :NormalMode()
    :VisualMode()
    :OperatorMode()
    :Action(":cprev<CR>")
    :Desc("Previous quickfix item")

-- Location list
Find.LocationList = Builder:New()
    :NormalMode()
    :VisualMode()
    :OperatorMode()
    :Action(":lopen<CR>")
    :Desc("Open location list")

Find.LocationListClose = Builder:New()
    :NormalMode()
    :VisualMode()
    :OperatorMode()
    :Action(":lclose<CR>")
    :Desc("Close location list")

Find.LocationListNext = Builder:New()
    :NormalMode()
    :VisualMode()
    :OperatorMode()
    :Action(":lnext<CR>")
    :Desc("Next location list item")

Find.LocationListPrev = Builder:New()
    :NormalMode()
    :VisualMode()
    :OperatorMode()
    :Action(":lprev<CR>")
    :Desc("Previous location list item")

Find.SearchSelection = Builder:New()
    :VisualMode()
    :Action('y/<C-r>"<CR>')
    :Desc("Search visual selection")

Find.SearchInFiles = Builder:New()
    :NormalMode()
    :Action(":vimgrep /pattern/ **/*.ext<CR>")
    :Desc("Search pattern in project files")

return Find
